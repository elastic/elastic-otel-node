# A `docker compose` config file to run tests services for testing
# `@elastic/opentelemetry-node` locally.
#
# Note: This isn't used in CI. CI uses GitHub Actions' `services: ...` for
# defining test services.
#
# Usage:
#   npm run test-services:start [services...]
#   npm run test-services:stop [services...]

name: edot-nodejs-test-services

services:
  cassandra:
    image: cassandra:3
    environment:
      MAX_HEAP_SIZE: "1G"
      HEAP_NEWSIZE: 400m
    ports:
      - "9042:9042"
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 1s
      timeout: 10s
      retries: 30

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.1
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "network.host=_site_"
      - "transport.host=127.0.0.1"
      - "http.host=0.0.0.0"
      - "xpack.security.enabled=false"
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 1s
      timeout: 10s
      retries: 30

  kafka:
    # https://hub.docker.com/r/bitnami/kafka/tags
    # Config ref: https://github.com/bitnami/containers/tree/main/bitnami/kafka#how-to-use-this-image
    image: bitnami/kafka:3.4
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      # This enables in KRAFT mode
      # ref: https://kafka.apache.org/documentation/#kraft
      # ref: https://github.com/bitnami/containers/blob/283ec43b9dc54ef92a6ec031282e8be3fe280f56/bitnami/kafka/README.md?plain=1#L933
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092,EXTERNAL://kafka_b:9094
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - BITNAMI_DEBUG=yes
      - KAFKA_CFG_NUM_PARTITIONS=2
    healthcheck:
      # Kafka healthcheck ideas from https://github.com/wurstmeister/kafka-docker/issues/167
      test: kafka-cluster.sh cluster-id --bootstrap-server localhost:9092 || exit 1
      interval: 1s
      timeout: 10s
      retries: 30

  mongodb:
    image: mongo:7
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok", "--quiet"]
      interval: 1s
      timeout: 10s
      retries: 30

  mssql:
    # Tags listed at https://hub.docker.com/r/microsoft/mssql-server
    # Docs: https://learn.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker
    image: mcr.microsoft.com/mssql/server:2022-CU14-ubuntu-22.04
    platform: linux/amd64
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Very(!)Secure
    ports:
      - "1433:1433"
    healthcheck:
      test: ["CMD", "/opt/mssql-tools18/bin/sqlcmd", "-C", "-S", "mssql", "-U", "sa", "-P", "Very(!)Secure", "-Q", "select 1"]
      interval: 1s
      timeout: 10s
      retries: 30

  mysql:
    image: mysql:5.7
    # No ARM64 image layer. See https://stackoverflow.com/a/65592942
    platform: linux/x86_64
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysql" ,"-h", "mysql", "-P", "3306", "-u", "root", "-e", "SELECT 1"]
      interval: 1s
      timeout: 10s
      retries: 30

  ollama:
    # A light fork of Ollama to float some in-progress contributions related
    # to more closely matching OpenAI behavior.
    image: ghcr.io/elastic/ollama/ollama:testing
    ports:
      - "11434:11434"
    healthcheck:
      test: ["CMD", "ollama", "ls"]
      interval: 1s
      timeout: 10s
      retries: 30

  postgres:
    # https://github.com/docker-library/docs/blob/master/postgres/README.md#how-to-extend-this-image
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_HOST_AUTH_METHOD: 'trust'
      POSTGRES_USER: 'postgres'
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 1s
      timeout: 10s
      retries: 30

  rabbitmq:
    image: rabbitmq:3
    environment:
      RABBITMQ_DEFAULT_USER: "username"
      RABBITMQ_DEFAULT_PASS: "password"
    ports:
      - "22221:5672"

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 10s
      retries: 30
