// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is copied and modified from https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/common/v1/common.proto
// Modifications:
//  - Removal of unneeded InstrumentationLibrary and StringKeyValue messages.
//  - Change of go_package to reference a package in this repo.
//  - Removal of gogoproto usage.

// @generated by protoc-gen-es v2.7.0 with parameter "target=js+dts,js_import_style=legacy_commonjs"
// @generated from file anyvalue.proto (package opamp.proto, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file anyvalue.proto.
 */
export declare const file_anyvalue: GenFile;

/**
 * AnyValue is used to represent any type of attribute value. AnyValue may contain a
 * primitive value such as a string or integer or it may contain an arbitrary nested
 * object containing arrays, key-value lists and primitives.
 *
 * @generated from message opamp.proto.AnyValue
 */
export declare type AnyValue = Message<"opamp.proto.AnyValue"> & {
  /**
   * The value is one of the listed fields. It is valid for all values to be unspecified
   * in which case this AnyValue is considered to be "null".
   *
   * @generated from oneof opamp.proto.AnyValue.value
   */
  value: {
    /**
     * @generated from field: string string_value = 1;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * @generated from field: bool bool_value = 2;
     */
    value: boolean;
    case: "boolValue";
  } | {
    /**
     * @generated from field: int64 int_value = 3;
     */
    value: bigint;
    case: "intValue";
  } | {
    /**
     * @generated from field: double double_value = 4;
     */
    value: number;
    case: "doubleValue";
  } | {
    /**
     * @generated from field: opamp.proto.ArrayValue array_value = 5;
     */
    value: ArrayValue;
    case: "arrayValue";
  } | {
    /**
     * @generated from field: opamp.proto.KeyValueList kvlist_value = 6;
     */
    value: KeyValueList;
    case: "kvlistValue";
  } | {
    /**
     * @generated from field: bytes bytes_value = 7;
     */
    value: Uint8Array;
    case: "bytesValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message opamp.proto.AnyValue.
 * Use `create(AnyValueSchema)` to create a new message.
 */
export declare const AnyValueSchema: GenMessage<AnyValue>;

/**
 * ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
 * since oneof in AnyValue does not allow repeated fields.
 *
 * @generated from message opamp.proto.ArrayValue
 */
export declare type ArrayValue = Message<"opamp.proto.ArrayValue"> & {
  /**
   * Array of values. The array may be empty (contain 0 elements).
   *
   * @generated from field: repeated opamp.proto.AnyValue values = 1;
   */
  values: AnyValue[];
};

/**
 * Describes the message opamp.proto.ArrayValue.
 * Use `create(ArrayValueSchema)` to create a new message.
 */
export declare const ArrayValueSchema: GenMessage<ArrayValue>;

/**
 * KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
 * since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
 * a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
 * avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
 * are semantically equivalent.
 *
 * @generated from message opamp.proto.KeyValueList
 */
export declare type KeyValueList = Message<"opamp.proto.KeyValueList"> & {
  /**
   * A collection of key/value pairs of key-value pairs. The list may be empty (may
   * contain 0 elements).
   *
   * @generated from field: repeated opamp.proto.KeyValue values = 1;
   */
  values: KeyValue[];
};

/**
 * Describes the message opamp.proto.KeyValueList.
 * Use `create(KeyValueListSchema)` to create a new message.
 */
export declare const KeyValueListSchema: GenMessage<KeyValueList>;

/**
 * KeyValue is a key-value pair that is used to store Span attributes, Link
 * attributes, etc.
 *
 * @generated from message opamp.proto.KeyValue
 */
export declare type KeyValue = Message<"opamp.proto.KeyValue"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: opamp.proto.AnyValue value = 2;
   */
  value?: AnyValue;
};

/**
 * Describes the message opamp.proto.KeyValue.
 * Use `create(KeyValueSchema)` to create a new message.
 */
export declare const KeyValueSchema: GenMessage<KeyValue>;

